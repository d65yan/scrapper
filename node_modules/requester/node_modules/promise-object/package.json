{
  "name": "promise-object",
  "version": "0.0.20",
  "description": "helper object for when.js",
  "main": "index.js",
  "directories": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/icodeforlove/node-promise-object.git"
  },
  "keywords": [
    "promises",
    "helper",
    "prototype"
  ],
  "author": {
    "name": "Chad Scira"
  },
  "license": "MIT",
  "devDependencies": {
    "vows": "0.7.0"
  },
  "dependencies": {
    "whenplus": "1.7.1g",
    "underscore": "~1.4.4"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "readme": "## promise-object [![Build Status](https://travis-ci.org/icodeforlove/node-promise-object.png?branch=master)](https://travis-ci.org/icodeforlove/node-promise-object)\nprovides a base object that gives you the ability to create promise methods just by setting the first parameter to $deferred and also binds those methods to the instance. It also allows you to extend any method and use mixins.\n\n## installation\n\tnpm install promise-object\n\n## pseudo params\nthere are a few rules with these params\n* if you want to use **$deferred** it MUST be the first param\n* any other pseudo param must be before any real params\n\nthese pseudo params are supported\n* **$deferred** converts the method into a deferred method\n* **$super** returns the parent method\n* **$self** alternative to var self = this;\n* **$config** ensures that the first argument is an object\n\n## $config\nhelper that makes working with $config objects a little easier\n\n```javascript\nvar PromiseObject = require('promise-object');\n\nvar User = PromiseObject.create({\n\tinitialize: function ($config) {\n\t\tthis._name = $config.name;\n\t}\n});\n\nnew User({name: 'joe'});\nnew User(); // this does not error out because $config was replaced with an empty object\n```\n\n## $deferred / promises\npromises make life a lot easier when dealing with heavy async logic, promise-object uses [when](https://github.com/cujojs/when) for promises so all deferred methods can be used with **when** and not have any scope issues.\n\nbelow is an example of using promises and showing errors\n\n```javascript\nvar PromiseObject = require('promise-object');\n\nvar User = PromiseObject.create({\n\tinitialize: function (name) {\n\t\tthis._name = name;\n\t},\n\n\tgetInfo: function ($deferred, error) {\n\t\tsetTimeout(function () {\n\t\t\tif (error) {\n\t\t\t\t$deferred.reject(new Error('Something went wrong'));\n\t\t\t} else {\n\t\t\t\t$deferred.resolve({age: 12});\n\t\t\t}\n\t\t}, 1000);\n\t}\n});\n\nvar joe = new User('joe');\njoe.getInfo(false).then(\n\tfunction (info) {\n\t\tconsole.log(info);\n\t},\n\tfunction (error) {\n\t\tconsole.log(error);\n\t}\n);\n```\n\n## extending\nany method can be extended upon, **$super** is used to request the parent method\n```javascript\nvar PromiseObject = require('promise-object');\n\nvar User = PromiseObject.create({\n\tinitialize: function (name) {\n\t\tthis._name = name;\n\t},\n\n\tgetInfo: function ($deferred) {\n\t\tsetTimeout(function () {\n\t\t\t$deferred.resolve({age: 12});\n\t\t}, 0);\n\t}\n});\n\nvar Admin = User.extend({\n\tinitialize: function ($super, name) {\n\t\t$super(name);\n\t},\n\n\tgetInfo: function ($deferred, $super) {\n\t\t$super().then(function (info) {\n\t\t\tinfo.moreStuff = 123;\n\n\t\t\t$deferred.resolve(info);\n\n\t\t}, $deferred.reject);\n\t}\n});\n\nvar joe = new Admin('joe');\njoe.getInfo().then(function (info) {\n\tconsole.log(info);\n});\n```\n\n## mixins\n```javascript\nvar PromiseObject = require('promise-object');\n\nvar Mixin =  {\n\tgetRandomNumber: function () {\n\t\treturn Math.random();\n\t}\n};\n\nvar Mixin2 = {\n\tgetRandomNumberDeferred: function ($deferred) {\n\t\t$deferred.resolve(Math.random());\n\t}\n};\n\nvar Class = PromiseObject.create(Mixin, Mixin2, {\n\tinitialize: function () {\n\t}\n});\n\n// examples\nvar example = new Class();\n\nconsole.log(example.getRandomNumber());\n\nexample.getRandomNumberDeferred().then(function (number) {\n\tconsole.log(number);\n});\n```\n\nmixins should only use initialize to store instance vars\n\n```javascript\nvar Mixin =  {\n\tinitialize: function () {\n\t\tthis._tags = [];\n\t},\n\t\n\thasTag: function (tag) {\n\t\treturn this._tags.indexOf(tag) !== -1;\n\t},\n\n\taddTag: function (tag) {\n\t\tif (this.hasTag(tag)) return;\n\t\t\n\t\tthis._tags.push(tag);\n\t}\n};\n```",
  "readmeFilename": "Readme.md",
  "_id": "promise-object@0.0.20",
  "dist": {
    "shasum": "e69f4640666347540310401f5c1a452d1d3998a4"
  },
  "_from": "promise-object@0.0.20",
  "_resolved": "https://registry.npmjs.org/promise-object/-/promise-object-0.0.20.tgz"
}
